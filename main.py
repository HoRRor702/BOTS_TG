import sqlite3
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackContext, CallbackQueryHandler, ConversationHandler, MessageHandler, Filters

# –°–æ–∑–¥–∞–µ–º –ë–î
conn = sqlite3.connect("employees.db", check_same_thread=False)
c = conn.cursor()
c.execute('''CREATE TABLE IF NOT EXISTS employees (
             id INTEGER PRIMARY KEY AUTOINCREMENT,
             fullname TEXT,
             age INTEGER,
             phone TEXT,
             position TEXT,
             activity TEXT,
             points INTEGER DEFAULT 0)''')
conn.commit()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞
FULLNAME, AGE, PHONE, POSITION, ACTIVITY = range(5)

def start(update: Update, context: CallbackContext):
    query = update.callback_query
    keyboard = []
    c.execute("SELECT id, fullname FROM employees")
    employees = c.fetchall()
    
    for emp in employees:
        keyboard.append([InlineKeyboardButton(emp[1], callback_data=f"view_{emp[0]}")])
    
    keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", callback_data="add_employee")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    if query:
        query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:", reply_markup=reply_markup)
    else:
        update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:", reply_markup=reply_markup)
    return ConversationHandler.END

def view_employee(update: Update, context: CallbackContext):
    query = update.callback_query
    emp_id = query.data.split("_")[1]
    c.execute("SELECT * FROM employees WHERE id=?", (emp_id,))
    emp = c.fetchone()
    
    if emp:
        text = (f"üìå–§–ò–û: {emp[1]}\n"
                f"üéÇ–í–æ–∑—Ä–∞—Å—Ç: {emp[2]}\n"
                f"üì±–¢–µ–ª–µ—Ñ–æ–Ω: {emp[3]}\n"
                f"üíº–î–æ–ª–∂–Ω–æ—Å—Ç—å: {emp[4]}\n"
                f"üîß–î–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {emp[5]}\n"
                f"‚≠êÔ∏è–ë–∞–ª–ª—ã: {emp[6]}")
        keyboard = [
            [InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", callback_data=f"delete_{emp_id}")],
            [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –±–∞–ª–ª—ã", callback_data=f"add_points_{emp_id}")],
            [InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –±–∞–ª–ª—ã", callback_data=f"remove_points_{emp_id}")],
            [InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data="back")]
        ]
        query.message.edit_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

def add_employee(update: Update, context: CallbackContext):
    update.callback_query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:")
    return FULLNAME

def receive_fullname(update: Update, context: CallbackContext):
    context.user_data['fullname'] = update.message.text
    update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (1-150):")
    return AGE

def receive_age(update: Update, context: CallbackContext):
    try:
        age = int(update.message.text)
        if 1 <= age <= 150:
            context.user_data['age'] = age
            update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:")
            return PHONE
        update.message.reply_text("‚ùå –í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 150. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return AGE
    except ValueError:
        update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 150. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return AGE

def receive_phone(update: Update, context: CallbackContext):
    context.user_data['phone'] = update.message.text
    update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:")
    return POSITION

def receive_position(update: Update, context: CallbackContext):
    context.user_data['position'] = update.message.text
    update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:")
    return ACTIVITY

def receive_activity(update: Update, context: CallbackContext):
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    data = [
        context.user_data['fullname'],
        context.user_data['age'],
        context.user_data['phone'],
        context.user_data['position'],
        update.message.text  # activity
    ]
    
    # –í—Å—Ç–∞–≤–ª—è–µ–º –≤ –ë–î
    c.execute('''INSERT INTO employees 
              (fullname, age, phone, position, activity) 
              VALUES (?, ?, ?, ?, ?)''', data)
    conn.commit()
    
    update.message.reply_text("‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    start(update, context)
    return ConversationHandler.END

def delete_employee(update: Update, context: CallbackContext):
    query = update.callback_query
    emp_id = query.data.split("_")[1]
    c.execute("DELETE FROM employees WHERE id=?", (emp_id,))
    conn.commit()
    query.answer("–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —É–¥–∞–ª–µ–Ω!")
    start(update, context)

def change_points(update: Update, context: CallbackContext):
    query = update.callback_query
    data = query.data.split("_")
    emp_id = data[2]
    operation = data[0]
    
    context.user_data['emp_id'] = emp_id
    context.user_data['operation'] = operation
    
    query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ (1-99999):")
    return 1

def receive_points(update: Update, context: CallbackContext):
    try:
        points = int(update.message.text)
        if 1 <= points <= 99999:
            emp_id = context.user_data['emp_id']
            operation = context.user_data['operation']
            
            c.execute("SELECT points FROM employees WHERE id=?", (emp_id,))
            current_points = c.fetchone()[0]
            
            new_points = current_points + points if operation == "add" else current_points - points
            
            c.execute("UPDATE employees SET points=? WHERE id=?", (new_points, emp_id))
            conn.commit()
            
            update.message.reply_text(f"‚úÖ –ë–∞–ª–ª—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã! –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {new_points}")
            start(update, context)
            return ConversationHandler.END
        update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 99999:")
        return 1
    except ValueError:
        update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ:")
        return 1

def main():
    updater = Updater("–¢–û–ö–ï–ù_–ë–û–¢–ê", use_context=True)
    dp = updater.dispatcher

    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(add_employee, pattern="add_employee")],
        states={
            FULLNAME: [MessageHandler(Filters.text & ~Filters.command, receive_fullname)],
            AGE: [MessageHandler(Filters.text & ~Filters.command, receive_age)],
            PHONE: [MessageHandler(Filters.text & ~Filters.command, receive_phone)],
            POSITION: [MessageHandler(Filters.text & ~Filters.command, receive_position)],
            ACTIVITY: [MessageHandler(Filters.text & ~Filters.command, receive_activity)]
        },
        fallbacks=[]
    )

    points_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(change_points, pattern=r"^(add_points|remove_points)_")],
        states={1: [MessageHandler(Filters.text & ~Filters.command, receive_points)]},
        fallbacks=[]
    )

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CallbackQueryHandler(view_employee, pattern=r"^view_"))
    dp.add_handler(CallbackQueryHandler(delete_employee, pattern=r"^delete_"))
    dp.add_handler(CallbackQueryHandler(start, pattern="back"))
    dp.add_handler(conv_handler)
    dp.add_handler(points_handler)

    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()